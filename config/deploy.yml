# Name of your application. Used to uniquely configure containers.
service: goodsongs-api

# Name of the container image.
image: angiehemans/goodsongs-api

# Deploy to these servers.
servers:
  web:
    - 143.198.62.246
  # job:
  #   hosts:
  #     - YOUR_SERVER_IP_HERE
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: api.goodsongs.app

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: angiehemans

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - SECRET_KEY_BASE
    - DATABASE_URL
    - JWT_SECRET_KEY
    - SPOTIFY_CLIENT_ID
    - SPOTIFY_CLIENT_SECRET
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    # SOLID_QUEUE_IN_PUMA: false  # Disabled - not setting this env var at all

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Use the PostgreSQL accessory for database  
    DB_HOST: goodsongs-api-db

    # Frontend URL for OAuth redirects in production
    FRONTEND_URL: https://www.goodsongs.app

    # Log everything from Rails
    RAILS_LOG_LEVEL: info

    # Rails environment
    RAILS_ENV: production

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "goodsongs_api_storage:/rails/storage"

# Asset bridging disabled for API-only application
# asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION:
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  db:
    image: postgres:16
    host: 143.198.62.246
    port: "127.0.0.1:5433:5432"
    env:
      clear:
        POSTGRES_DB: goodsongs_api_production
      secret:
        - POSTGRES_PASSWORD
    files:
      - config/init.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data
  redis:
    image: redis:7.0
    host: 143.198.62.246
    port: "127.0.0.1:6379:6379"
    directories:
      - data:/data
